// Generated by Apple Swift version 4.2.1 effective-4.1.50 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GCXTrustPolicy",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSBundle;
enum GCXValidationType : NSInteger;
@protocol GCXTrustPolicy;

/// Abstraction layer to simplify the creation of a ‘TrustPolicy’ conforming objects.
SWIFT_CLASS_NAMED("ComposePolicy")
@interface GCXComposePolicy : NSObject
/// Skip certificate chain validation during standard X.509 validation.
/// e.g. performing validation with servers that use self-signed
/// or expired certificates
/// Taken into account only for:
/// ValidationType.pinPublicKey and ValidationType.pinCertificate
/// Default setting is ‘false’.
@property (nonatomic) BOOL allowInsecureServerTrust;
/// Define if the host name(s) will be checked during the standard X.509 validation.
/// This value is completely ignored if validation is skipped by setting
/// ‘allowInsecureServerTrust = true’.
/// Default setting is ‘true’.
@property (nonatomic) BOOL validateHostName;
/// The bundle where to search for certificates.
/// Taken into account only for:
/// ValidationType.pinPublicKey and ValidationType.pinCertificate
/// Default setting is the main Bundle.
@property (nonatomic, strong) NSBundle * _Nonnull certificateBundle;
/// A custom closure for validation with ValidationType.custom.
@property (nonatomic, copy) BOOL (^ _Nullable customValidation)(SecTrustRef _Nullable);
/// The host name that the policy applies for.
@property (nonatomic, copy) NSString * _Null_unspecified hostName;
/// the TrustServer for validation with ValidationType.*Online
@property (nonatomic, copy) NSURL * _Nullable trustServer;
@property (nonatomic, copy) NSData * _Nullable trustServerCertificate;
@property (nonatomic, copy) NSString * _Nullable customer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Prepare the creation of the final ‘TrustPolicy’ object for a given
/// host name. Use the ‘ValidationType’ enummeration values to specify
/// which type of trust is desired.
/// \param type the policy type
///
/// \param forHost the host name
///
///
/// returns:
/// an instance of this class
- (nonnull instancetype)initWithValidation:(enum GCXValidationType)type forHost:(NSString * _Nonnull)host OBJC_DESIGNATED_INITIALIZER;
/// Concrete creator for the ‘TrustPolicy’ conforming object
///
/// returns:
/// an object of type ‘TrustDirective’ conforming to ‘TrustPolicy’ protocol
- (id <GCXTrustPolicy> _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("TrustManager")
@interface GCXTrustManager : NSObject
/// A shared instance to use from e.g. NSURLSession or NSURLConnection.
/// Will call the default initializer -init().
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GCXTrustManager * _Nonnull sharedInstance;)
+ (GCXTrustManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Convenience initializer for trust policies per host.
/// This offers the opportunity to apply different trust
/// evaluation policies on a per-host basis.
/// e.g. host 1 uses certificate pinning, host 2 simple
/// host validation and host 3 uses public key pinning.
/// \param trustPolicies an Array containing TrustPolicy conforming objects
///
///
/// returns:
/// the instance
- (nonnull instancetype)initWithTrustPolicies:(NSArray<id <GCXTrustPolicy>> * _Nonnull)trustPolicies;
/// Retrieve the matching policy per host.
/// \param hostName the name of the host
///
///
/// returns:
/// a TrustPolicy conforming object
- (id <GCXTrustPolicy> _Nullable)policyForHost:(NSString * _Nonnull)hostName SWIFT_WARN_UNUSED_RESULT;
/// \code
///  Retrieve all registered host names.
///
///  - returns: an array of string
///
/// \endcode
- (NSArray<NSString *> * _Nonnull)allHostNames SWIFT_WARN_UNUSED_RESULT;
/// Retrieve all registered TrustPolicy objects.
///
/// returns:
/// array of TrustPolicy conforming objects
- (NSArray<id <GCXTrustPolicy>> * _Nonnull)allPolicies SWIFT_WARN_UNUSED_RESULT;
/// Add a new TrustPolicy object.
/// Key is the TrustPolicy`s ‘hostName’ property.
/// \param policy a TrustPolicy conforming object
///
- (void)addWithPolicy:(id <GCXTrustPolicy> _Nonnull)trustPolicy;
/// Convenience function to add a batch of TrustPolicy objects.
/// Key is the TrustPolicy`s ‘hostName’ property.
/// \param policies a TrustPolicy conforming object
///
- (void)addWithPolicies:(NSArray<id <GCXTrustPolicy>> * _Nonnull)trustPolicies;
/// Remove a TrustPolicy object by it<code>s key. Key is the TrustPolicy</code>s ‘hostName’ property
/// \param hostName a host name
///
- (void)removePolicyFor:(NSString * _Nonnull)hostName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol definition for validating a policy against a remote trust
SWIFT_PROTOCOL_NAMED("TrustPolicy")
@protocol GCXTrustPolicy
/// The name of the host
@property (nonatomic, copy) NSString * _Null_unspecified hostName;
/// Validates a policy against a given trust
- (BOOL)validateWith:(SecTrustRef _Nonnull)trust SWIFT_WARN_UNUSED_RESULT;
@end

/// Enummeration of all trust policy validation types.
/// <ul>
///   <li>
///     disabled:           Perform no validation at all.
///     Be careful, this will always consider any server trust as valid.
///   </li>
///   <li>
///     standard:           Perform a standard validation.
///     Using the system provided standard mechanism that is basically a
///     X.509 certificate trust evaluation in a recursive two-step
///     process down to the trusted anchor certificate.
///   </li>
///   <li>
///     custom:              Perform a completely custom validation.
///     The validation process is completely up to you.
///   </li>
///   <li>
///     pinCertificate:      Perform a validation by pinning certificate(s).
///     The validation process is considered successful if one of the pinned
///     certificates match one of the servers certificates and standard
///     validation has also been successful.
///   </li>
///   <li>
///     pinPublicKey:        Perform a validation by pinning the certificate(s) public key.
///     The validation process is considered successful if one of the pinned
///     public key(s) match one of the servers public key(s) and standard
///     validation has also been successful.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, GCXValidationType, "ValidationType", closed) {
  GCXValidationTypeDisabled = 0,
  GCXValidationTypeStandard = 1,
  GCXValidationTypeCustom = 2,
  GCXValidationTypePinCertificate = 3,
  GCXValidationTypePinPublicKey = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
